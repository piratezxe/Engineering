// <auto-generated />
using System;
using EngineeringWork.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EngineeringWork.Web.Migrations
{
    [DbContext(typeof(PassengerContext))]
    [Migration("20191221125353_newmigration")]
    partial class newmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EngineeringWork.Core.Domain.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Street");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.DailyRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CrateDate");

                    b.Property<Guid>("DriverId");

                    b.Property<int>("FreeSeats");

                    b.Property<Guid?>("RouteId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RouteId");

                    b.ToTable("DailyRoutes");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.Driver", b =>
                {
                    b.Property<Guid>("DriverId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PhoneNumber");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<Guid?>("VehicleId");

                    b.HasKey("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Node");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.Passenger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddressId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Passenger");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.PassengerBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DriverPhoneNumber");

                    b.Property<string>("FromPlace");

                    b.Property<bool>("IsActive");

                    b.Property<Guid>("PassengerBookingProposalId");

                    b.Property<string>("PassengerName");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("ToPlace");

                    b.HasKey("Id");

                    b.ToTable("PassengerBookings");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.PassengerBookingProposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<Guid>("DailyRouteId");

                    b.Property<int>("SeatsQuantity");

                    b.Property<Guid>("UserProposalId");

                    b.HasKey("Id");

                    b.HasIndex("DailyRouteId");

                    b.ToTable("PassengerBookingProposals");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Revoke");

                    b.Property<string>("Token");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.Route", b =>
                {
                    b.Property<Guid>("RouteId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("EndNodeId");

                    b.Property<Guid?>("StartNodeId");

                    b.HasKey("RouteId");

                    b.HasIndex("EndNodeId");

                    b.HasIndex("StartNodeId");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("Password");

                    b.Property<string>("Role");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand");

                    b.Property<string>("Name");

                    b.Property<int>("Seats");

                    b.HasKey("Id");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.DailyRoute", b =>
                {
                    b.HasOne("EngineeringWork.Core.Domain.Driver")
                        .WithMany("DailyRoutes")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EngineeringWork.Core.Domain.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId");

                    b.OwnsOne("EngineeringWork.Core.Domain.MoneyValue", "MoneyValue", b1 =>
                        {
                            b1.Property<Guid>("DailyRouteId");

                            b1.HasKey("DailyRouteId");

                            b1.ToTable("DailyRoutes");

                            b1.HasOne("EngineeringWork.Core.Domain.DailyRoute")
                                .WithOne("MoneyValue")
                                .HasForeignKey("EngineeringWork.Core.Domain.MoneyValue", "DailyRouteId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.Driver", b =>
                {
                    b.HasOne("EngineeringWork.Core.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.Passenger", b =>
                {
                    b.HasOne("EngineeringWork.Core.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.PassengerBookingProposal", b =>
                {
                    b.HasOne("EngineeringWork.Core.Domain.DailyRoute")
                        .WithMany("PassengerBookings")
                        .HasForeignKey("DailyRouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("EngineeringWork.Core.Domain.PassengerBookingProposalDecision", "PassengerBookingProposalDecision", b1 =>
                        {
                            b1.Property<Guid>("PassengerBookingProposalId");

                            b1.Property<DateTime>("DateTime");

                            b1.Property<string>("ProposalStatus")
                                .IsRequired();

                            b1.Property<string>("RejectReason");

                            b1.HasKey("PassengerBookingProposalId");

                            b1.ToTable("PassengerBookingProposals");

                            b1.HasOne("EngineeringWork.Core.Domain.PassengerBookingProposal")
                                .WithOne("PassengerBookingProposalDecision")
                                .HasForeignKey("EngineeringWork.Core.Domain.PassengerBookingProposalDecision", "PassengerBookingProposalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.Route", b =>
                {
                    b.HasOne("EngineeringWork.Core.Domain.Node", "EndNode")
                        .WithMany()
                        .HasForeignKey("EndNodeId");

                    b.HasOne("EngineeringWork.Core.Domain.Node", "StartNode")
                        .WithMany()
                        .HasForeignKey("StartNodeId");
                });
#pragma warning restore 612, 618
        }
    }
}
