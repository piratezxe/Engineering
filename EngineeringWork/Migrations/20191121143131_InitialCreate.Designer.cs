// <auto-generated />
using System;
using EngineeringWork.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EngineeringWork.Web.Migrations
{
    [DbContext(typeof(PassengerContext))]
    [Migration("20191121143131_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EngineeringWork.Core.Domain.Adress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Street");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Adress");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookingStatus");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("Id");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.DailyRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<Guid>("DriverId");

                    b.Property<int>("FreeSeats");

                    b.Property<Guid?>("RouteId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RouteId");

                    b.ToTable("DailyRoutes");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.Driver", b =>
                {
                    b.Property<Guid>("DriverId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<Guid?>("VehicleId");

                    b.HasKey("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Node");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.Passenger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddressId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Passenger");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.PassengerBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BookingId");

                    b.Property<int>("BookingStatus");

                    b.Property<Guid?>("DailyRouteId");

                    b.Property<Guid?>("PassengerId");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("DailyRouteId");

                    b.HasIndex("PassengerId");

                    b.ToTable("PassengerBooking");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Revoke");

                    b.Property<string>("Token");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.Route", b =>
                {
                    b.Property<Guid>("RouteId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("EndNodeId");

                    b.Property<Guid?>("StartNodeId");

                    b.HasKey("RouteId");

                    b.HasIndex("EndNodeId");

                    b.HasIndex("StartNodeId");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("Password");

                    b.Property<string>("Role");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand");

                    b.Property<string>("Name");

                    b.Property<int>("Seats");

                    b.HasKey("Id");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.DailyRoute", b =>
                {
                    b.HasOne("EngineeringWork.Core.Domain.Driver")
                        .WithMany("DailyRoutes")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EngineeringWork.Core.Domain.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.Driver", b =>
                {
                    b.HasOne("EngineeringWork.Core.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.Passenger", b =>
                {
                    b.HasOne("EngineeringWork.Core.Domain.Adress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.PassengerBooking", b =>
                {
                    b.HasOne("EngineeringWork.Core.Domain.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("EngineeringWork.Core.Domain.DailyRoute")
                        .WithMany("passengerBooking")
                        .HasForeignKey("DailyRouteId");

                    b.HasOne("EngineeringWork.Core.Domain.Passenger", "Passenger")
                        .WithMany()
                        .HasForeignKey("PassengerId");
                });

            modelBuilder.Entity("EngineeringWork.Core.Domain.Route", b =>
                {
                    b.HasOne("EngineeringWork.Core.Domain.Node", "EndNode")
                        .WithMany()
                        .HasForeignKey("EndNodeId");

                    b.HasOne("EngineeringWork.Core.Domain.Node", "StartNode")
                        .WithMany()
                        .HasForeignKey("StartNodeId");
                });
#pragma warning restore 612, 618
        }
    }
}
